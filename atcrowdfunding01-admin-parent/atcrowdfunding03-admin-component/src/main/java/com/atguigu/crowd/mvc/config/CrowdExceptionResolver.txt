package com.atguigu.crowd.mvc.config;

import com.atguigu.crowd.util.CrowdUtil;
import com.atguigu.crowd.util.ResultEntity;
import com.google.gson.Gson;
import com.sun.deploy.net.HttpResponse;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

//@ControllerAdvice表示当前类是一个基于注解的异常处理器类
@ControllerAdvice
public class CrowdExceptionResolver {
    @ExceptionHandler(value = ArithmeticException.class)
    public ModelAndView resolveMathException(ArithmeticException exception,
                                             HttpServletRequest request, HttpServletResponse response) throws IOException {
        //1判断当前请求类型
        boolean judgeResult = CrowdUtil.judgeRequestType(request);
        //2如果是Ajax请求
        if (judgeResult) {
            //3.创建ResultEntity对象
            ResultEntity<Object> resultEntity = ResultEntity.failed(exception.getMessage());
            //4创建Gson对象
            Gson gson = new Gson();
            // 5.将ResultEntity对象转换为JSON字符串
            String Json = gson.toJson(resultEntity);
            //6.将JSON字符串作为响应体返回给浏览器
            response.getWriter().write(Json);
            //7.由于上面已经通过原生的response对象返回了响应，所以不提供ModelAndView对象

            return null;
        }
//        8.如果不是Ajax请求则创建ModelAndView对象
        ModelAndView modelAndView = new ModelAndView();
//        9.将Exception对象存入模型
        modelAndView.addObject("Exception", exception);
        // 10.设置对应的视图名称
        modelAndView.setViewName("system-error");
        //11.返回ModelAndView对象

        return null;
    }

    //@ExceptionHandler将一个具体的异常类型和一个方法关联起来
    @ExceptionHandler(value = NullPointerException.class)
    //实际捕获到的异常类型  /当前请求对象 /当前响应对象
    public ModelAndView resolveNullPointerException(NullPointerException exception, HttpServletRequest request, HttpServletResponse response) throws IOException {
        //1判断当前请求类型
        boolean judgeResult = CrowdUtil.judgeRequestType(request);
        //2如果是Ajax请求
        if (judgeResult) {
            //3.创建ResultEntity对象
            ResultEntity<Object> resultEntity = ResultEntity.failed(exception.getMessage());
            //4创建Gson对象
            Gson gson = new Gson();
            // 5.将ResultEntity对象转换为JSON字符串
            String Json = gson.toJson(resultEntity);
            //6.将JSON字符串作为响应体返回给浏览器
            response.getWriter().write(Json);
            //7.由于上面已经通过原生的response对象返回了响应，所以不提供ModelAndView对象

            return null;
        }
//        8.如果不是Ajax请求则创建ModelAndView对象
        ModelAndView modelAndView = new ModelAndView();
//        9.将Exception对象存入模型
        modelAndView.addObject("Exception", exception);
        // 10.设置对应的视图名称
        modelAndView.setViewName("system-error");
        //11.返回ModelAndView对象

        return modelAndView;
    }
}
